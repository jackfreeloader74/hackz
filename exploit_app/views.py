from django.shortcuts import render
from django.http import HttpResponse, JsonResponse
from django.core import serializers

from exploit_app.models import Program, Command, Tag

from django.shortcuts import render, get_object_or_404
from django.core.paginator import Paginator
from exploit_app import exploit_lib

from exploit_app.exploit_lib import Filter
from dal import autocomplete

# Create your views here.
def index(request):
    context = {
              }

    return render(request, 'exploit_app/search.html', context)


def command_view(request, command_id):

    command = get_object_or_404(Command, pk=command_id)
    program = command.program

    stage_list  = exploit_lib.prettyify_list(command.program.stages.all())
    tag_list = exploit_lib.prettyify_list(command.tags.all())
    references = command.references.all()

    ## Commands
    context = {
                'command' : command,
                'stage_list' : stage_list,
                'tag_list' : tag_list,
                'references' : references,
                'program' : program
              }

    return render(request, 'exploit_app/command.html', context)


# View to display all details about a single program
def program_view(request, program_id):
    paginate_by = 2
    program = get_object_or_404(Program, pk=program_id)

    ## Commands
    command_list = program.command_set.all()
    paginator = Paginator(command_list, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    references = program.references.all()

    stage_list = program.stages.all()
    stage_list = [str(element) for element in stage_list]
    presentable_stage_list  = ", ".join(stage_list)


    context = {
                'program': program,
                'command_list' : command_list,
                'page_obj' : page_obj,
                'presentable_stage_list' : presentable_stage_list,
                'references' : references
              }

    return render(request, 'exploit_app/program.html', context)



def programm_search_view(request):
    return HttpResponse("Hello World!")

# Display page used to search for commands
def command_search_view(request):
    return HttpResponse("Hello World!")


# Search programmes by:
# Name, target, stage
# return - program name, target, description, references, list of commands, list of stages
def perform_command_search(request):

    filters = []

    tag_name = request.GET.get('tag', 'default_if_not_found_value')
    tag = Tag.objects.get(name=tag_name)

    tag_filter = Filter("Tag", tag.name)
    filters.append(tag_filter)


    paginate_by = 2
    command_list = Command.objects.all().filter(tags__name=tag_name)

    paginator = Paginator(command_list, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
                'command_list' : command_list,
                'page_obj' : page_obj,
                'filters' : filters
            }

    return render(request, 'exploit_app/command_search_results.html', context)










################## AUTO COMPLETE VIEWS #######################
def tag_autocomplete(request):

    qs = Tag.objects.filter(name__istartswith=request.GET.get('term'))
    titles = []
    for tag in qs:
        titles.append(tag.name)

    return JsonResponse(titles, safe=False)


def target_autocomplete(request):

    programs = Program.objects.all();
    targets = []

    for program in programs:
        target = program.target
        if target.lower().startswith(request.GET.get('term').lower()):
            targets.append(target)

    targets = list(dict.fromkeys(targets))
    return JsonResponse(targets, safe=False)
